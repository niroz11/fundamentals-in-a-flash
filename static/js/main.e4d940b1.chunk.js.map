{"version":3,"sources":["Question.js","Message.js","QuizSummary.js","Category.js","Welcome.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCorrectIdsFromStorage","questionCategory","localStorage","hasOwnProperty","JSON","parse","getItem","saveCorrectlyAnsweredIdToStorage","questionId","correctIds","push","setItem","stringify","validateIfCorrectAnswer","event","preventDefault","target","innerHTML","currentQuestion","correct_answer","id","category","updateCorrectCounter","updateUserStatusAndResult","state","_this2","_this$props","skipQuestion","questionNum","totalQuizQuestions","question","answers","style","resources","toLowerCase","split","join","react_default","a","createElement","className","length","map","answer","index","onClick","key","Component","Messsage","userResult","updateCurrentQuestionId","isFinalQuestion","href","QuizSummary","numberCorrect","totalQuestions","resetQuiz","Category","clearStorangeAndSetupQuizWithAllQs","removeItem","setupQuiz","retrieveCorrectAnswerIds","setupQuizWithoutCorrectlyAnsweredQs","correctlyAnsweredIds","showQuestionOptions","questionsPerCategory","allCategoryQs","numMastered","Welcome","checkLocalStorage","updateCategoryOptionsToShow","setState","categoryToShowOptionsFor","categories","src_Category","App","filterQuestionsByCategory","questions","filter","getNumofQuestionsPerCategory","reduce","numPerCategory","curCategory","total","forEach","getQuestionCategories","includes","getQuestionIdsForNewCategory","answeredCorrectIds","filteredQuestions","returnQuestionsNotAnsweredCorrectly","filteredQuestion","nextQuestionIndex","quizQuestionsIndex","currentQuestionId","quizQuestionsIds","userStatus","correctCounter","newCategory","checkIfFinalQuestion","document","body","classList","add","fetch","then","data","json","results","fundamentalsQuestions","_this$state","finalQuizQ","find","src_Welcome","src_Question","Message","src_QuizSummary","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4d940b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  getCorrectIdsFromStorage = (questionCategory) => {\n    return localStorage.hasOwnProperty(questionCategory) ? JSON.parse(localStorage.getItem(questionCategory)) : false;\n  }\n\n  saveCorrectlyAnsweredIdToStorage = (questionId, questionCategory) => {\n    let correctIds = this.getCorrectIdsFromStorage(questionCategory) || [];\n    correctIds.push(questionId);\n    localStorage.setItem(questionCategory, JSON.stringify(correctIds));\n  }\n\n  validateIfCorrectAnswer = (event) => {\n    event.preventDefault();\n    if (event.target.innerHTML === this.props.currentQuestion.correct_answer) {\n      this.saveCorrectlyAnsweredIdToStorage(this.props.currentQuestion.id, this.props.currentQuestion.category)\n      this.props.updateCorrectCounter();\n      this.props.updateUserStatusAndResult('', 'correct')\n\n    } else {\n      this.props.updateUserStatusAndResult('', 'wrong');\n    }\n  }\n\n  render() {\n    let { currentQuestion, skipQuestion, questionNum, totalQuizQuestions } = this.props;  \n    let { id, category, question, answers, correct_answer, resources } = currentQuestion;\n    let style = category.toLowerCase().split(' ').join('-');\n    return (\n      <div className={\"question-contain \" + style}>\n        <p>Question {questionNum + 1} of {totalQuizQuestions.length}</p>\n        <p className=\"question\">{question}</p>\n        {\n          answers.map((answer, index) => {\n            return <button className={'answer' + index} onClick={this.validateIfCorrectAnswer} key={'answer' + index}>{answer}</button>\n          })\n        }\n        <button className=\"skip-btn\" onClick={skipQuestion}>Skip</button>\n      </div>\n    )\n  }\n}\n\nexport default Question;","import React, { Component } from 'react';\n\nclass Messsage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  updateUserStatusAndResult = (event) => {\n    event.preventDefault();\n    if (event.target.innerHTML === 'Finish'){\n      this.props.updateUserStatusAndResult('finished', '');\n    } else {\n      this.props.updateUserStatusAndResult('guessing', '');\n    }\n  }\n\n  render() {\n    let { userResult, currentQuestion, updateCurrentQuestionId, isFinalQuestion } = this.props;\n    let { category, correct_answer, resources } = currentQuestion;\n    let style = category.toLowerCase().split(' ').join('-');\n    return (\n      <div className={\"message-contain \" + style}>\n      {\n        userResult === 'correct' && \n          <p>Yay! <span className=\"answer\">{correct_answer}</span> is the correct answer </p>\n      }\n      {\n        userResult=== 'wrong' && \n          <p><span className=\"sorry\">Sorry that is not correct.</span>Check out the <a href={resources} target=\"_blank\">docs</a> for more information</p>\n      }\n      {\n          (!isFinalQuestion && userResult === 'correct') && <button className=\"next-btn small-btn\" onClick={updateCurrentQuestionId}>Next</button>\n      }\n      {\n          (!isFinalQuestion && userResult === 'wrong') && <div className=\"btns-contain\"><button className=\"tryagain-btn small-btn\" onClick={this.updateUserStatusAndResult}>Try Again</button><button className=\"next-btn small-btn\" onClick={updateCurrentQuestionId}>Next</button></div> \n      }\n      {\n          (isFinalQuestion && userResult === 'wrong') && <div className=\"btns-contain\"><button className=\"tryagain-btn small-btn\" onClick={this.updateUserStatusAndResult}>Try Again</button><button className=\"finish-btn small-btn\" onClick={this.updateUserStatusAndResult}>Finish</button></div>\n      }\n      {\n          (isFinalQuestion && userResult === 'correct')  &&  <button className=\"finish-btn\" onClick={this.updateUserStatusAndResult}>Finish</button>\n      }\n      </div>\n    )\n  }\n}\n\nexport default Messsage;","import React, { Component } from 'react';\n\nclass QuizSummary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    };\n  }\n\n  render() {\n    let { category, numberCorrect, totalQuestions, resetQuiz } = this.props;\n    let style = category.toLowerCase().split(' ').join('-')\n    return (\n      <div className={\"summary-contain \" + style}>\n        <h2>{category} Quiz Summary</h2>\n        <p>Great work!</p>\n        <p>You answered {numberCorrect} out of {totalQuestions} questions correctly</p>\n        <button className=\"test-again-btn\" onClick={resetQuiz}>Test Your Knowledge Again</button>\n      </div>\n    )\n  }\n}\n\nexport default QuizSummary;","import React, { Component } from 'react';\n\nclass Category extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showQuestionOptions: false\n    };\n  }\n\n  clearStorangeAndSetupQuizWithAllQs = (event) => {\n    event.preventDefault();\n    localStorage.removeItem(this.props.category);\n    this.props.setupQuiz(this.props.category);\n  }\n\n  retrieveCorrectAnswerIds = (category) => {\n    return JSON.parse(localStorage.getItem(category));\n  }\n\n  setupQuizWithoutCorrectlyAnsweredQs = (event) => {\n    event.preventDefault();\n    let correctlyAnsweredIds = this.retrieveCorrectAnswerIds(this.props.category);\n    this.props.setupQuiz(this.props.category, correctlyAnsweredIds);\n  }\n\n  render() {\n    let { category, questionsPerCategory } = this.props;\n    let style = category.toLowerCase().split(' ').join('-');\n    let allCategoryQs = questionsPerCategory[category];\n    let numMastered = this.retrieveCorrectAnswerIds(category).length;\n    return (\n      <div className={\"category-contain \" + style}>\n        <p className=\"category\">{category}</p>\n        <p>You have mastered {numMastered} of {allCategoryQs} questions, great work!</p>\n        <p>How would you like to quiz your knowledge today?</p>\n        <div className=\"btns-contain\">\n          <button className=\"small-btn\" onClick={this.clearStorangeAndSetupQuizWithAllQs}>Try all questions</button>\n          {\n            ((allCategoryQs - numMastered) >= 1) && <button className=\"small-btn\" onClick={this.setupQuizWithoutCorrectlyAnsweredQs}>Try mastering the other {allCategoryQs - numMastered}</button>\n          }  \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Category;","import React, { Component } from 'react';\nimport Category from './Category.js';\n\nclass Welcome extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categoryToShowOptionsFor: ''\n    };\n  }\n\n  checkLocalStorage = (event) => {\n    event.preventDefault();\n    let category = event.target.innerHTML;\n    localStorage.hasOwnProperty(category) ? this.updateCategoryOptionsToShow(category) : this.props.setupQuiz(category);\n  }\n\n  updateCategoryOptionsToShow = (category) => {\n    this.setState({\n        categoryToShowOptionsFor: category\n    });\n  }\n\n  render() {\n    let { categories, questionsPerCategory, setupQuiz } = this.props\n    return (\n      <div className=\"welcome\">\n        <p>Take these short quizzes to solidify your JS Fundamentals knowledge</p>\n        <p>Select a category below to get started</p>\n        {\n          categories.map((category, index) => {\n            let style = category.toLowerCase().split(' ').join('-');\n            return (this.state.categoryToShowOptionsFor === category) ? <Category category={category} questionsPerCategory={questionsPerCategory} setupQuiz={setupQuiz} key={index}/> :\n              <button className={\"category-btn-\" + style} onClick={this.checkLocalStorage} key={index}>{category}</button>\n          })\n        }\n      </div>\n    )\n  }\n}\n\nexport default Welcome;","import React, { Component } from 'react';\nimport './styles/main.scss';\nimport Question from './Question.js';\nimport Message from './Message.js';\nimport QuizSummary from './QuizSummary.js';\nimport Welcome from './Welcome.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n        category: '',\n        questions: [],\n        userStatus: '',\n        userResult: '',\n        quizQuestionsIds: [],\n        quizQuestionsIndex: 0,\n        currentQuestionId: '',\n        correctCounter: 0\n    }\n  }\n\n  componentDidMount() {\n    document.body.classList.add('background-color');\n    fetch('https://memoize-datasets.herokuapp.com/api/v1/fundamentalsQuestions')\n      .then(data => data.json())\n      .then((results) => {\n        results.fundamentalsQuestions.forEach(question => {\n          if (question.category === 'Prototype methods'){\n            question.category = 'Prototype Methods'\n          }\n        });\n        this.setState({\n          questions: results.fundamentalsQuestions\n        });\n      });\n  }\n\n  filterQuestionsByCategory = (category) => {\n    let questionsFilteredByCategory = this.state.questions.filter(question => {\n      if (question.category === category) {\n        return question;\n      }\n    });\n\n    return questionsFilteredByCategory;\n  }\n\n  getNumofQuestionsPerCategory = (categories) => {\n    return categories.reduce((numPerCategory, curCategory) => {\n      let total = 0;\n      this.state.questions.forEach(question => {\n        if (question.category === curCategory) {\n          total += 1;\n        }\n      });\n      numPerCategory[curCategory] = total;\n      return numPerCategory;\n    }, {});\n  };\n\n  getQuestionCategories = () => {\n    return this.state.questions.reduce((categories, question) => {\n      if (!categories.includes(question.category)) {\n        categories.push(question.category);\n      }\n      return categories;\n    }, []);\n  }\n\n  getQuestionIdsForNewCategory = (category, answeredCorrectIds) => {\n    let filteredQuestions = this.filterQuestionsByCategory(category);\n    \n    if (answeredCorrectIds) {\n      filteredQuestions = this.returnQuestionsNotAnsweredCorrectly(filteredQuestions, answeredCorrectIds);\n    }\n\n    let questionIds = filteredQuestions.map(filteredQuestion => {\n      return filteredQuestion.id;\n    });\n\n    return questionIds;\n  }\n\n  updateCurrentQuestionId = () => {\n    let nextQuestionIndex = (this.state.quizQuestionsIndex + 1);\n    let currentQuestionId = this.state.quizQuestionsIds[nextQuestionIndex];\n    this.setState({\n      userStatus: 'guessing',\n      userResult: '',\n      quizQuestionsIndex: nextQuestionIndex,\n      currentQuestionId\n    });\n  }\n  \n  resetQuiz = () => {\n    this.setState({\n      category: '',\n      userStatus: '',\n      userResult: '',\n      quizQuestionsIds: [],\n      quizQuestionsIndex: 0,\n      currentQuestionId: '',\n      correctCounter: 0\n    });\n  }\n\n  returnQuestionsNotAnsweredCorrectly = (questions, answeredCorrectIds) => {\n    return questions.filter(question => {\n      return !answeredCorrectIds.includes(question.id);\n    });\n  }\n\n  setupQuiz = (newCategory, answeredCorrectIds) => {\n    let quizQuestionsIds = this.getQuestionIdsForNewCategory(newCategory, answeredCorrectIds);\n    let currentQuestionId = quizQuestionsIds[0];\n    this.setState({\n      userStatus: 'guessing',\n      category: newCategory,\n      quizQuestionsIds,\n      quizQuestionsIndex: 0,\n      currentQuestionId\n    });\n\n  }\n\n  skipQuestion = () => {\n    this.checkIfFinalQuestion() ? this.setState({ userStatus: 'finished' }) : this.updateCurrentQuestionId();\n  }\n\n  updateUserStatusAndResult = (userStatus, userResult) => {\n    this.setState({\n      userStatus,\n      userResult\n    });\n  }\n\n  updateCorrectCounter = () => {\n    this.setState({\n      correctCounter: this.state.correctCounter + 1\n    });\n  }\n\n  checkIfFinalQuestion = () => {\n    if (this.state.quizQuestionsIndex === (this.state.quizQuestionsIds.length - 1)) {\n      return true;\n    }\n    return false;\n  }\n\n  render() {\n    let { category, questions, userStatus, userResult, quizQuestionsIds, currentQuestionId, correctCounter } = this.state;\n    let categories = this.getQuestionCategories();\n    let questionsPerCategory = this.getNumofQuestionsPerCategory(categories);\n    let currentQuestion = '';\n    let finalQuizQ = this.checkIfFinalQuestion();\n\n    if (category !== '' && userStatus !== 'finished') {\n      currentQuestion = questions.find(question => question.id === currentQuestionId);\n    }\n\n    return (\n      <div className=\"App\">\n        <header>\n          <i className=\"fas fa-home\" onClick={this.resetQuiz}></i>\n          <h1 className=\"title\">Fundamentals In A Flash</h1>\n        </header>\n        {\n          category === '' && <Welcome categories={categories} questionsPerCategory={questionsPerCategory} setupQuiz={this.setupQuiz}/>\n        }\n        {\n          userStatus === 'guessing' && <Question currentQuestion={currentQuestion} skipQuestion={this.skipQuestion} questionNum={this.state.quizQuestionsIndex} totalQuizQuestions={quizQuestionsIds} updateUserStatusAndResult={this.updateUserStatusAndResult} updateCorrectCounter={this.updateCorrectCounter}/>\n        }\n        {\n          userResult !== '' && <Message userResult={userResult} currentQuestion={currentQuestion} updateCurrentQuestionId={this.updateCurrentQuestionId} isFinalQuestion={finalQuizQ} updateUserStatusAndResult={this.updateUserStatusAndResult}/>\n        }\n        {\n          userStatus === 'finished' && <QuizSummary category={category} numberCorrect={correctCounter} totalQuestions={quizQuestionsIds.length} resetQuiz={this.resetQuiz}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}